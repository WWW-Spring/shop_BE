const fs = require('fs');
const path = require('path');

console.log('üîç QU√âT C·∫§U TR√öC ·∫¢NH LOCAL V√Ä SO S√ÅNH V·ªöI DATABASE\n');
console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

// ƒê·ªçc file SQL
const sqlContent = fs.readFileSync('src/main/resources/data-from-export.sql', 'utf-8');

// Parse products t·ª´ SQL
const productRegex = /\('([^']+(?:''[^']+)*)',\s*'([^']*(?:''[^']*)*)',\s*([0-9.]+),\s*(\d+),\s*([0-9.]+),\s*'([^']+)',\s*(\d+),\s*'([^']+(?:''[^']+)*)'\)/g;
const products = [];
let match;

while ((match = productRegex.exec(sqlContent)) !== null) {
    const [_, name, description, unitPrice, quantity, percentage, status, categoryId, imageUrl] = match;
    products.push({
        name: name.replace(/''/g, "'"),
        imageUrl: imageUrl.replace(/''/g, "'"),
        categoryId: parseInt(categoryId)
    });
}

console.log(`üìä T·ªïng s·ªë products trong database: ${products.length}\n`);

// Function ƒë·ªÉ qu√©t folder ƒë·ªá quy
function scanFolder(folderPath, basePath = '') {
    const files = [];
    
    try {
        const items = fs.readdirSync(folderPath);
        
        items.forEach(item => {
            const fullPath = path.join(folderPath, item);
            const stat = fs.statSync(fullPath);
            
            if (stat.isDirectory()) {
                // ƒê·ªá quy v√†o subfolder
                const subFiles = scanFolder(fullPath, path.join(basePath, item));
                files.push(...subFiles);
            } else if (stat.isFile() && (item.endsWith('.webp') || item.endsWith('.jpg') || item.endsWith('.png') || item.endsWith('.jpeg'))) {
                files.push({
                    fileName: item,
                    relativePath: path.join(basePath, item).replace(/\\/g, '/'),
                    fullPath: fullPath
                });
            }
        });
    } catch (err) {
        console.error(`‚ùå L·ªói khi ƒë·ªçc folder ${folderPath}:`, err.message);
    }
    
    return files;
}

// Qu√©t folder ·∫£nh local
const localImagesPath = 'src/main/resources/Anh';
console.log(`üìÅ ƒêang qu√©t folder: ${localImagesPath}\n`);

const localImages = scanFolder(localImagesPath);

console.log(`‚úÖ T√¨m th·∫•y ${localImages.length} ·∫£nh trong folder local\n`);

// Ph√¢n t√≠ch c·∫•u tr√∫c
const folderStats = {};
localImages.forEach(img => {
    const folder = path.dirname(img.relativePath);
    if (!folderStats[folder]) {
        folderStats[folder] = 0;
    }
    folderStats[folder]++;
});

console.log('üìä PH√ÇN B·ªê ·∫¢NH THEO FOLDER:');
console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

Object.entries(folderStats)
    .sort((a, b) => b[1] - a[1])
    .forEach(([folder, count]) => {
        console.log(`üìÅ ${folder}: ${count} ·∫£nh`);
    });

// So s√°nh v·ªõi database
console.log('\n\nüîç SO S√ÅNH V·ªöI DATABASE:');
console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

// Extract hash t·ª´ Cloudinary URL
function extractHashFromUrl(url) {
    // https://res.cloudinary.com/ddd20pmdb/image/upload/v1745033646/ReactNew/anh/Computer/BanPhim/hktgvgk8h3oddq1nzb1l.webp
    const match = url.match(/([a-z0-9]+)\.(webp|jpg|png|jpeg)$/i);
    return match ? match[1] : null;
}

// T·∫°o map c·ªßa local images
const localImageMap = {};
localImages.forEach(img => {
    const hash = img.fileName.replace(/\.(webp|jpg|png|jpeg)$/i, '');
    localImageMap[hash] = img;
});

// Ki·ªÉm tra products
let matchedProducts = 0;
let unmatchedProducts = [];

products.forEach(product => {
    const hash = extractHashFromUrl(product.imageUrl);
    
    if (hash && localImageMap[hash]) {
        matchedProducts++;
    } else {
        unmatchedProducts.push({
            name: product.name,
            imageUrl: product.imageUrl,
            hash: hash
        });
    }
});

console.log(`‚úÖ Products c√≥ ·∫£nh kh·ªõp trong folder local: ${matchedProducts}/${products.length} (${(matchedProducts/products.length*100).toFixed(1)}%)`);
console.log(`‚ùå Products KH√îNG t√¨m th·∫•y ·∫£nh local: ${unmatchedProducts.length}\n`);

if (unmatchedProducts.length > 0) {
    console.log('‚ö†Ô∏è  DANH S√ÅCH PRODUCTS KH√îNG T√åM TH·∫§Y ·∫¢NH:');
    console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n');
    
    unmatchedProducts.slice(0, 20).forEach((prod, idx) => {
        console.log(`${idx + 1}. ${prod.name}`);
        console.log(`   URL: ${prod.imageUrl.substring(0, 80)}...`);
        console.log(`   Hash: ${prod.hash || 'N/A'}\n`);
    });
    
    if (unmatchedProducts.length > 20) {
        console.log(`... v√† ${unmatchedProducts.length - 20} products kh√°c\n`);
    }
}

// Ki·ªÉm tra ·∫£nh th·ª´a (c√≥ trong folder nh∆∞ng kh√¥ng d√πng)
console.log('\nüìä KI·ªÇM TRA ·∫¢NH TH·ª™A:');
console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

const usedHashes = new Set();
products.forEach(product => {
    const hash = extractHashFromUrl(product.imageUrl);
    if (hash) usedHashes.add(hash);
});

const unusedImages = localImages.filter(img => {
    const hash = img.fileName.replace(/\.(webp|jpg|png|jpeg)$/i, '');
    return !usedHashes.has(hash);
});

console.log(`üìÅ ·∫¢nh trong folder local: ${localImages.length}`);
console.log(`‚úÖ ·∫¢nh ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng: ${usedHashes.size}`);
console.log(`‚ö†Ô∏è  ·∫¢nh KH√îNG ƒë∆∞·ª£c s·ª≠ d·ª•ng: ${unusedImages.length}\n`);

if (unusedImages.length > 0 && unusedImages.length <= 30) {
    console.log('‚ö†Ô∏è  DANH S√ÅCH ·∫¢NH TH·ª™A (kh√¥ng d√πng):');
    console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n');
    
    unusedImages.forEach((img, idx) => {
        console.log(`${idx + 1}. ${img.relativePath}`);
    });
}

// ƒê·ªÅ xu·∫•t mapping
console.log('\n\nüí° ƒê·ªÄ XU·∫§T:');
console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

if (matchedProducts === products.length) {
    console.log('‚úÖ T·∫§T C·∫¢ PRODUCTS ƒê√É C√ì ·∫¢NH KH·ªöP!');
    console.log('   Database hi·ªán t·∫°i ƒë√£ ch√≠nh x√°c, kh√¥ng c·∫ßn ch·ªânh s·ª≠a.');
} else {
    console.log('‚ö†Ô∏è  C√ì S·∫¢N PH·∫®M CH∆ØA C√ì ·∫¢NH KH·ªöP');
    console.log('\nC√°c b∆∞·ªõc ti·∫øp theo:');
    console.log('1. Ki·ªÉm tra l·∫°i c√°c products kh√¥ng t√¨m th·∫•y ·∫£nh ·ªü tr√™n');
    console.log('2. C√≥ th·ªÉ c·∫ßn upload ·∫£nh l√™n Cloudinary ho·∫∑c c·∫≠p nh·∫≠t URL');
    console.log('3. Ho·∫∑c map l·∫°i v·ªõi ·∫£nh th·ª´a n·∫øu ph√π h·ª£p');
}

if (unusedImages.length > 0) {
    console.log('\nüí° C√≥ ·∫£nh th·ª´a trong folder:');
    console.log('   - C√≥ th·ªÉ d√πng ƒë·ªÉ map cho products ch∆∞a c√≥ ·∫£nh');
    console.log('   - Ho·∫∑c x√≥a n·∫øu kh√¥ng c·∫ßn thi·∫øt');
}

console.log('\n‚ú® Qu√©t ho√†n t·∫•t!\n');
